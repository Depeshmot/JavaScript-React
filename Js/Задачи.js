// •1	Какое будет выведено значение: let x = 5; alert( x++ ); ?

// •2	Чему равно такое выражение: [ ] + false - null + true ?

// •3	Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?

// •4	Чему равна сумма [ ] + 1 + 2?

// •5	Что выведет этот код: alert( "1"[0] )?

// •6	Чему равно 2 && 1 && null && 0 && undefined ?

// •7	Есть ли разница между выражениями? !!( a && b ) и (a && b)?

// •8	Что выведет этот код: alert( null || 2 && 3 || 4 ); ?

// •9	a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

// •10	Что выведет этот код: alert( +"Infinity" ); ?

// •11	Верно ли сравнение: "Ёжик" > "яблоко"?

// •12	Чему равно 0 || "" || 2 || undefined || true || falsе ?


//1 
let x = 5; alert(x++); // ТЕМА: Операторы инкримента и дикримента (x++) = 5; (++x) = 6;

//2
console.log(typeof([] + false - null + true)); // Пустой массив превращает свое значение в строку (string) + false = 'false', 
// далее если отнять от строки null = NaN (не число), соответственно все последующие операции будут довать NaN.

//3
let y = 1;
let x = y = 2;
alert(x);  // = 2   

//4
[] + 1 + 2 // = 12

//5
alert('1'[0] ); // = 1 К каждому элементу строки можно обратиться по его символу, символ под номером 0 равен 1, т.е символ нуля это единица

//6
console.log(2 && 1 && null && 0 && undefined); //  = null(ничего)
// И запинается на лжи

//7
console.log(!!(a && b) == (a && b)); // Урок динамическая типизация

//8
alert( null || 2 && 3 || 4); // Таблица приоритетов операторов

//9
const a = [1, 2, 3]; 
const b = [1, 2, 3];

//10
alert(+'Infinity'); // плюс превращает тип данных в число

//11
console.log('Ёжик' > 'яблоко'); // Таблица юникод символов

//12
console.log(0 || '' || 2 || undefined || true || false); // = 2




